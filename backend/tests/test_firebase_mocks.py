"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–æ–∫–æ–≤ Firestore.
"""

import asyncio
import pytest
from unittest.mock import MagicMock, AsyncMock
from fastapi.testclient import TestClient
from fastapi import FastAPI, Depends

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ functions
from routers.content_router import router as content_router, get_animal_by_id
from shared.auth import get_current_user_id

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEST_USER_ID = "test_user_123"
TEST_ANIMAL_ID = "test_animal_456"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()
app.include_router(content_router)

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def override_get_current_user_id():
    return TEST_USER_ID

app.dependency_overrides[get_current_user_id] = override_get_current_user_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è Firestore
def setup_firestore_mock():
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Firestore –∫–ª–∏–µ–Ω—Ç–∞
    db_mock = MagicMock(name="db_mock")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ ID
    content_collection = MagicMock(name="content_collection")
    db_mock.collection.return_value = content_collection
    
    animals_doc = MagicMock(name="animals_doc")
    content_collection.document.return_value = animals_doc
    
    animals_collection = MagicMock(name="animals_collection")
    animals_doc.collection.return_value = animals_collection
    
    animal_doc_ref = MagicMock(name="animal_doc_ref")
    animals_collection.document.return_value = animal_doc_ref
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async def async_get_success():
        doc_snapshot = MagicMock(name="doc_snapshot")
        doc_snapshot.exists = True
        doc_snapshot.to_dict.return_value = {
            "name": "–õ–µ–≤",
            "english_name": "Lion",
            "difficulty": 2,
            "image_url": "https://example.com/lion.jpg",
            "sound_url": "https://example.com/lion.mp3"
        }
        doc_snapshot.id = TEST_ANIMAL_ID
        return doc_snapshot
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ get() –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    animal_doc_ref.get = MagicMock()
    animal_doc_ref.get.return_value = async_get_success()
    
    return db_mock

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ ID
@pytest.mark.asyncio
async def test_get_animal_by_id_success():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ Firestore
    db_mock = setup_firestore_mock()
    
    # –ó–∞–º–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Firestore –Ω–∞ –º–æ–∫
    import routers.content_router as content_router_module
    old_get_firestore = content_router_module.get_firestore
    content_router_module.get_firestore = lambda: db_mock
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TestClient
        result = await get_animal_by_id(TEST_ANIMAL_ID, TEST_USER_ID)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assert result["id"] == TEST_ANIMAL_ID
        assert result["name"] == "–õ–µ–≤"
        assert result["english_name"] == "Lion"
        assert result["difficulty"] == 2
        
        print("‚úÖ –¢–µ—Å—Ç get_animal_by_id_success —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ get_animal_by_id_success: {e}")
        return False
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        content_router_module.get_firestore = old_get_firestore

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Firestore –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ .stream()
@pytest.mark.asyncio
async def test_stream_exception():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ Firestore
    db_mock = MagicMock(name="db_mock")
    content_collection = MagicMock(name="content_collection")
    db_mock.collection.return_value = content_collection
    animals_doc = MagicMock(name="animals_doc")
    content_collection.document.return_value = animals_doc
    animals_collection = MagicMock(name="animals_collection")
    animals_doc.collection.return_value = animals_collection
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è query –∏ query.limit()
    query_mock = MagicMock(name="query_mock")
    animals_collection.limit.return_value = query_mock
    
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –æ—à–∏–±–∫–æ–π
    async def error_stream_generator():
        raise RuntimeError("–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Firestore –ø—Ä–∏ stream()")
        yield None  # –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ, –Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stream() –º–µ—Ç–æ–¥
    stream_mock = MagicMock(name="stream_mock")
    query_mock.stream = stream_mock
    stream_mock.return_value = error_stream_generator()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    try:
        async for _ in stream_mock.return_value:
            pass  # –ù–µ –¥–æ–ª–∂–Ω—ã —Å—é–¥–∞ –ø–æ–ø–∞—Å—Ç—å –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print("‚ùå –¢–µ—Å—Ç test_stream_exception –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ")
        return False
    except RuntimeError as e:
        if "–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in str(e):
            print("‚úÖ –¢–µ—Å—Ç test_stream_exception —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç test_stream_exception –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç test_stream_exception –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async def run_tests():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–æ–∫–æ–≤ Firestore...")
    
    test_results = [
        await test_get_animal_by_id_success(),
        await test_stream_exception(),
    ]
    
    if all(test_results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if __name__ == "__main__":
    asyncio.run(run_tests())
